//@version=6
strategy("BOS Strong Strategy", max_lines_count = 500, overlay = true, calc_on_every_tick = true)

// ================================================================================
// üîë CHI·∫æN L∆Ø·ª¢C BOS ‚Üí OB ‚Üí ENTRY
// ================================================================================
// 
// TR√åNH T·ª∞ TH·ª∞C HI·ªÜN:
// 1. BOS (Break of Structure) - X√°c nh·∫≠n xu h∆∞·ªõng m·ªõi
// 2. OB (Order Block) - T√¨m ƒëi·ªÉm entry t·ªëi ∆∞u  
// 3. Entry - V√†o l·ªánh khi gi√° retracement v·ªÅ OB
//
// CHI TI·∫æT T·ª™NG B∆Ø·ªöC:
//
// üìç B∆Ø·ªöC 1: BOS (Break of Structure)
// - BOS x·∫£y ra khi gi√° ph√° swing high/low quan tr·ªçng
// - ƒê√¢y ch·ªâ l√† x√°c nh·∫≠n xu h∆∞·ªõng m·ªõi h√¨nh th√†nh, CH∆ØA ENTRY
// - BOS xu·ªëng = gi√° ƒë√≥ng c·ª≠a ph√° swing low g·∫ßn nh·∫•t
// - BOS l√™n = gi√° ƒë√≥ng c·ª≠a ph√° swing high g·∫ßn nh·∫•t
//
// üìç B∆Ø·ªöC 2: T√¨m OB (Order Block) 
// - Sau khi c√≥ BOS, t√¨m OB g·∫ßn nh·∫•t theo h∆∞·ªõng BOS
// - N·∫øu BOS xu·ªëng ‚Üí ch·ªçn Bearish OB (c√¢y bullish cu·ªëi c√πng tr∆∞·ªõc c√∫ gi·∫£m m·∫°nh)
// - N·∫øu BOS l√™n ‚Üí ch·ªçn Bullish OB (c√¢y bearish cu·ªëi c√πng tr∆∞·ªõc c√∫ tƒÉng m·∫°nh)
//
// üìç B∆Ø·ªöC 3: Entry Point
// - ƒê·ª£i gi√° h·ªìi (retracement) v·ªÅ OB ƒë√≥
// - ƒê√¢y ch√≠nh l√† ƒëi·ªÉm "entry v√†ng"
// - Th∆∞·ªùng ƒë·∫∑t limit order t·∫°i v√πng OB (ho·∫∑c wick c·ªßa OB)
// - ‚ö†Ô∏è QUAN TR·ªåNG: Kh√¥ng entry ngay khi v·ª´a c√≥ BOS
//
// üìç RISK MANAGEMENT:
// - SL ƒë·∫∑t ngo√†i OB (tr√™n cho short, d∆∞·ªõi cho long)
// - TP theo R:R (1:1 m·∫∑c ƒë·ªãnh)
//
// ================================================================================

// === Strategy Settings ===
// BOS Strong Entry Settings
showBOSSignals = input.bool(true, title="Show BOS Signals", group="BOS Entry")
showSLTP = input.bool(true, title="Show SL/TP Levels", group="Risk Management")

// Risk Management Settings
slLookback = input.int(50, title="SL Lookback (bars)", minval=10, maxval=200, group="Risk Management")
tpRatio = input.float(1, title="TP Ratio (vs SL)", minval=0.1, maxval=2.0, step=0.1, group="Risk Management")

// === Constants ===
BULLISH = +1
BEARISH = -1
BOS = "BOS"
CHOCH = "CHOCH"

GREEN = #089981
RED = #F23645
BLUE = #2157f3
GRAY = #878b94

// === Data Structures ===
type pivot
    float currentLevel
    float lastLevel
    bool crossed
    int barTime
    int barIndex

type trend
    int bias

// === Variables ===
var pivot swingHigh = pivot.new(na, na, false, time, bar_index)
var pivot swingLow = pivot.new(na, na, false, time, bar_index)
var trend swingTrend = trend.new(0)

// === Smart Money Functions ===
// Leg detection function
leg(int size) =>
    var leg = 0
    newLegHigh = high[size] > ta.highest(high, size)
    newLegLow = low[size] < ta.lowest(low, size)
    
    if newLegHigh
        leg := 0  // Bearish leg
    else if newLegLow
        leg := 1  // Bullish leg
    leg

startOfNewLeg(int leg) => ta.change(leg) != 0
startOfBearishLeg(int leg) => ta.change(leg) == -1
startOfBullishLeg(int leg) => ta.change(leg) == +1

// Get current structure
getCurrentStructure(int size) =>
    currentLeg = leg(size)
    newPivot = startOfNewLeg(currentLeg)
    pivotLow = startOfBullishLeg(currentLeg)
    pivotHigh = startOfBearishLeg(currentLeg)

    if newPivot
        if pivotLow
            swingLow.lastLevel := swingLow.currentLevel
            swingLow.currentLevel := low[size]
            swingLow.crossed := false
            swingLow.barTime := time[size]
            swingLow.barIndex := bar_index[size]
        else
            swingHigh.lastLevel := swingHigh.currentLevel
            swingHigh.currentLevel := high[size]
            swingHigh.crossed := false
            swingHigh.barTime := time[size]
            swingHigh.barIndex := bar_index[size]



// === BOS Detection ===
// ================================================================================
// üéØ BOS DETECTION LOGIC
// ================================================================================
// Theo chi·∫øn l∆∞·ª£c BOS ‚Üí OB ‚Üí Entry:
// 1. Ph√°t hi·ªán khi gi√° ph√° swing high/low quan tr·ªçng
// 2. X√°c nh·∫≠n b·∫±ng c√¢y n·∫øn m·∫°nh (strong bar)  
// 3. ƒê√°nh d·∫•u xu h∆∞·ªõng m·ªõi nh∆∞ng CH∆ØA ENTRY
// 4. Ch·ªù retracement v·ªÅ OB ƒë·ªÉ entry
// ================================================================================

// Check for strong bullish/bearish bars
isStrongBullishBar() =>
    bodySize = math.abs(close - open)
    upperWick = high - math.max(close, open)
    lowerWick = math.min(close, open) - low
    
    // Strong bullish: body > 60% of total range, small upper wick
    totalRange = high - low
    bodyRatio = bodySize / totalRange
    upperWickRatio = upperWick / totalRange
    
    bodyRatio > 0.5 and upperWickRatio < 0.4

isStrongBearishBar() =>
    bodySize = math.abs(close - open)
    upperWick = high - math.max(close, open)
    lowerWick = math.min(close, open) - low
    
    // Strong bearish: body > 60% of total range, small lower wick
    totalRange = high - low
    bodyRatio = bodySize / totalRange
    lowerWickRatio = lowerWick / totalRange
    
    bodyRatio > 0.5 and lowerWickRatio < 0.4




// Check for weak bullish/bearish bars (any bullish/bearish bar)
isWeakBullishBar() =>
    close > open

isWeakBearishBar() =>
    close < open

// ================================================================================
// üö® BOS SIGNAL DETECTION
// ================================================================================
// LOGIC THEO CHI·∫æN L∆Ø·ª¢C:
// - BOS l√™n: gi√° ƒë√≥ng c·ª≠a ph√° swing high g·∫ßn nh·∫•t + c√¢y n·∫øn m·∫°nh
// - BOS xu·ªëng: gi√° ƒë√≥ng c·ª≠a ph√° swing low g·∫ßn nh·∫•t + c√¢y n·∫øn m·∫°nh  
// - ƒê√¢y ch·ªâ l√† b∆∞·ªõc 1 - X√ÅC NH·∫¨N xu h∆∞·ªõng m·ªõi
// - Sau BOS ‚Üí t√¨m OB g·∫ßn nh·∫•t ‚Üí ch·ªù retracement ƒë·ªÉ entry
// ================================================================================
detectBOSSignals() =>
    bullishBOSStrong = false
    bearishBOSStrong = false
    bullishBOSWeak = false
    bearishBOSWeak = false
    
    // üìà BOS L√äN: Gi√° ph√° swing high + c√¢y n·∫øn bullish m·∫°nh
    // ‚Üí Xu h∆∞·ªõng tƒÉng m·ªõi, c·∫ßn t√¨m Bullish OB ƒë·ªÉ entry long
    if ta.crossover(close, swingHigh.currentLevel) and not swingHigh.crossed and isStrongBullishBar()
        // Determine if it's BOS or CHOCH
        signalType = swingTrend.bias == BEARISH ? CHOCH : BOS
        
        if signalType == BOS  // Only take BOS signals
            bullishBOSStrong := true
            swingHigh.crossed := true
            swingTrend.bias := BULLISH
    
    // üìâ BOS XU·ªêNG: Gi√° ph√° swing low + c√¢y n·∫øn bearish m·∫°nh  
    // ‚Üí Xu h∆∞·ªõng gi·∫£m m·ªõi, c·∫ßn t√¨m Bearish OB ƒë·ªÉ entry short
    if ta.crossunder(close, swingLow.currentLevel) and not swingLow.crossed and isStrongBearishBar()
        // Determine if it's BOS or CHOCH
        signalType = swingTrend.bias == BULLISH ? CHOCH : BOS
        
        if signalType == BOS  // Only take BOS signals
            bearishBOSStrong := true
            swingLow.crossed := true
            swingTrend.bias := BEARISH
    
    [bullishBOSStrong, bearishBOSStrong]

// === Risk Management Functions ===
// Calculate TP based on 100% of SL distance
calculateTP(float entryPrice, float slPrice, bool isLong) =>
    slDistance = math.abs(entryPrice - slPrice)
    tpDistance = slDistance * tpRatio
    
    if isLong
        entryPrice + tpDistance
    else
        entryPrice - tpDistance

// === Main Execution ===
// Update structure
getCurrentStructure(50)  // Swing structure

// Detect BOS signals
[bullishBOSStrong, bearishBOSStrong] = detectBOSSignals()

// ================================================================================
// üéØ ORDER BLOCK (OB) LOGIC - B∆Ø·ªöC 2 C·ª¶A CHI·∫æN L∆Ø·ª¢C
// ================================================================================
// C√ÅCH HO·∫†T ƒê·ªòNG:
// 1. Sau khi c√≥ BOS, t√¨m OB g·∫ßn nh·∫•t theo h∆∞·ªõng BOS
// 2. BOS xu·ªëng ‚Üí Bearish OB (c√¢y bullish cu·ªëi c√πng tr∆∞·ªõc c√∫ gi·∫£m m·∫°nh)
// 3. BOS l√™n ‚Üí Bullish OB (c√¢y bearish cu·ªëi c√πng tr∆∞·ªõc c√∫ tƒÉng m·∫°nh)  
// 4. ƒê·ª£i gi√° retracement v·ªÅ v√πng OB n√†y ƒë·ªÉ entry
// 5. SL ƒë·∫∑t ngo√†i OB (tr√™n cho short, d∆∞·ªõi cho long)
// ================================================================================

m5High = request.security(syminfo.tickerid, "5", high)
m5Low = request.security(syminfo.tickerid, "5", low)
m5Volume = request.security(syminfo.tickerid, "5", volume)

// X√°c ƒë·ªãnh Order Block t·ª´ timeframe 5M
m5OBHigh = request.security(syminfo.tickerid, "5", ta.highest(high, 50))
m5OBLow = request.security(syminfo.tickerid, "5", ta.lowest(low, 50))

// üéØ SL LEVELS - Theo nguy√™n t·∫Øc OB
longSLLevel = m5OBLow    // SL cho long = d∆∞·ªõi OB (th·∫•p nh·∫•t c·ªßa OB 5M)
shortSLLevel = m5OBHigh  // SL cho short = tr√™n OB (cao nh·∫•t c·ªßa OB 5M)

// ================================================================================
// üöÄ STRATEGY EXECUTION - B∆Ø·ªöC 3: ENTRY POINT
// ================================================================================
// LOGIC ENTRY THEO CHI·∫æN L∆Ø·ª¢C BOS ‚Üí OB ‚Üí ENTRY:
// 
// ‚ö†Ô∏è CH√ö √ù: Code hi·ªán t·∫°i entry ngay khi c√≥ BOS Signal
// üìã C√ÅCH C·∫¢I THI·ªÜN THEO CHI·∫æN L∆Ø·ª¢C CHU·∫®N:
// 1. Ph√°t hi·ªán BOS ‚Üí ƒê√°nh d·∫•u xu h∆∞·ªõng m·ªõi
// 2. T√¨m OB g·∫ßn nh·∫•t theo h∆∞·ªõng BOS  
// 3. ƒê·∫∑t limit order t·∫°i v√πng OB
// 4. Entry khi gi√° retracement v·ªÅ OB (ƒëi·ªÉm entry v√†ng)
// 
// üéØ RISK MANAGEMENT:
// - SL: Ngo√†i OB (d∆∞·ªõi cho long, tr√™n cho short)
// - TP: Theo R:R ratio (m·∫∑c ƒë·ªãnh 1:1)
// ================================================================================

// üìà LONG ENTRY: Sau BOS l√™n
if bullishBOSStrong and strategy.position_size <= 0
    entryPrice = close  // ‚ö†Ô∏è Entry ngay, n√™n s·ª≠a th√†nh limit order t·∫°i OB
    slPrice = longSLLevel  // SL d∆∞·ªõi Order Block
    tpPrice = calculateTP(entryPrice, slPrice, true)  // TP theo R:R 1:1
    
    strategy.entry("Long BOS Strong", strategy.long)
    strategy.exit("Long Exit Strong", "Long BOS Strong", stop=slPrice, limit=tpPrice)
    
    if showBOSSignals
        label.new(bar_index, low, text="BOS\nSTRONG\nLONG", color=color.green, style=label.style_label_up, size=size.normal)

// üìâ SHORT ENTRY: Sau BOS xu·ªëng  
if bearishBOSStrong and strategy.position_size >= 0
    entryPrice = close  // ‚ö†Ô∏è Entry ngay, n√™n s·ª≠a th√†nh limit order t·∫°i OB
    slPrice = shortSLLevel  // SL tr√™n Order Block
    tpPrice = calculateTP(entryPrice, slPrice, false)  // TP theo R:R 1:1
    
    strategy.entry("Short BOS Strong", strategy.short)
    strategy.exit("Short Exit Strong", "Short BOS Strong", stop=slPrice, limit=tpPrice)
    
    if showBOSSignals
        label.new(bar_index, high, text="BOS\nSTRONG\nSHORT", color=color.red, style=label.style_label_down, size=size.normal)

// === Plots ===
// Calculate TP levels for plotting
longTPLevel = strategy.position_size > 0 ? calculateTP(strategy.position_avg_price, longSLLevel, true) : na
shortTPLevel = strategy.position_size < 0 ? calculateTP(strategy.position_avg_price, shortSLLevel, false) : na

// Plot current SL levels for reference
plot(showSLTP and strategy.position_size > 0 ? longSLLevel : na, "Long SL Level", color.red, 2, plot.style_stepline)
plot(showSLTP and strategy.position_size < 0 ? shortSLLevel : na, "Short SL Level", color.red, 2, plot.style_stepline)

// Plot current TP levels for reference
plot(longTPLevel, "Long TP Level", color.green, 2, plot.style_stepline)
plot(shortTPLevel, "Short TP Level", color.green, 2, plot.style_stepline)

// ================================================================================
// üìù T√ìM T·∫ÆT CHI·∫æN L∆Ø·ª¢C BOS ‚Üí OB ‚Üí ENTRY
// ================================================================================
// ‚úÖ HI·ªÜN T·∫†I SCRIPT ƒê√É C√ì:
// 1. ‚úÖ BOS Detection - Ph√°t hi·ªán khi gi√° ph√° swing high/low v·ªõi c√¢y n·∫øn m·∫°nh
// 2. ‚úÖ Order Block Logic - S·ª≠ d·ª•ng 5M timeframe ƒë·ªÉ x√°c ƒë·ªãnh OB levels  
// 3. ‚úÖ Risk Management - SL ngo√†i OB, TP theo R:R 1:1
// 4. ‚úÖ Visual Signals - Hi·ªÉn th·ªã BOS signals v√† SL/TP levels
//
// üîß C·∫¢I THI·ªÜN TI·∫æP THEO:
// 1. üîÑ Thay ƒë·ªïi entry logic: Thay v√¨ entry ngay khi c√≥ BOS,
//    n√™n ƒë·ª£i gi√° retracement v·ªÅ OB r·ªìi m·ªõi entry (limit order)
// 2. üéØ C·∫£i thi·ªán OB detection: T√¨m c√¢y n·∫øn c·ª• th·ªÉ l√†m OB
//    (bullish cu·ªëi tr∆∞·ªõc c√∫ gi·∫£m m·∫°nh / bearish cu·ªëi tr∆∞·ªõc c√∫ tƒÉng m·∫°nh)
// 3. üìä Th√™m visualization cho OB zones
// 4. ‚è∞ Timeout cho c√°c BOS signal (kh√¥ng ch·ªù retracement m√£i m√£i)
//
// üí° L∆ØU √ù: ƒê√¢y l√† framework c∆° b·∫£n cho chi·∫øn l∆∞·ª£c BOS ‚Üí OB ‚Üí Entry
//     Trader c√≥ th·ªÉ fine-tune c√°c parameters theo market conditions
// ================================================================================