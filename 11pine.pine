//@version=6
strategy("BOS Strong Strategy", max_lines_count = 500, overlay = true, calc_on_every_tick = true)

// ================================================================================
// üîë CHI·∫æN L∆Ø·ª¢C BOS ‚Üí OB ‚Üí ENTRY
// ================================================================================
// 
// TR√åNH T·ª∞ TH·ª∞C HI·ªÜN:
// 1. BOS (Break of Structure) - X√°c nh·∫≠n xu h∆∞·ªõng m·ªõi
// 2. OB (Order Block) - T√¨m ƒëi·ªÉm entry t·ªëi ∆∞u  
// 3. Entry - V√†o l·ªánh khi gi√° retracement v·ªÅ OB
//
// CHI TI·∫æT T·ª™NG B∆Ø·ªöC:
//
// üìç B∆Ø·ªöC 1: BOS (Break of Structure)
// - BOS x·∫£y ra khi gi√° ph√° swing high/low quan tr·ªçng
// - ƒê√¢y ch·ªâ l√† x√°c nh·∫≠n xu h∆∞·ªõng m·ªõi h√¨nh th√†nh, CH∆ØA ENTRY
// - BOS xu·ªëng = gi√° ƒë√≥ng c·ª≠a ph√° swing low g·∫ßn nh·∫•t
// - BOS l√™n = gi√° ƒë√≥ng c·ª≠a ph√° swing high g·∫ßn nh·∫•t
//
// üìç B∆Ø·ªöC 2: T√¨m OB (Order Block) 
// - Sau khi c√≥ BOS, t√¨m OB g·∫ßn nh·∫•t theo h∆∞·ªõng BOS
// - N·∫øu BOS xu·ªëng ‚Üí ch·ªçn Bearish OB (c√¢y bullish cu·ªëi c√πng tr∆∞·ªõc c√∫ gi·∫£m m·∫°nh)
// - N·∫øu BOS l√™n ‚Üí ch·ªçn Bullish OB (c√¢y bearish cu·ªëi c√πng tr∆∞·ªõc c√∫ tƒÉng m·∫°nh)
//
// üìç B∆Ø·ªöC 3: Entry Point
// - ƒê·ª£i gi√° h·ªìi (retracement) v·ªÅ OB ƒë√≥
// - ƒê√¢y ch√≠nh l√† ƒëi·ªÉm "entry v√†ng"
// - Th∆∞·ªùng ƒë·∫∑t limit order t·∫°i v√πng OB (ho·∫∑c wick c·ªßa OB)
// - ‚ö†Ô∏è QUAN TR·ªåNG: Kh√¥ng entry ngay khi v·ª´a c√≥ BOS
//
// üìç RISK MANAGEMENT:
// - SL ƒë·∫∑t ngo√†i OB (tr√™n cho short, d∆∞·ªõi cho long)
// - TP theo R:R (1:1 m·∫∑c ƒë·ªãnh)
//
// ================================================================================

// === Strategy Settings ===
// BOS Strong Entry Settings
showBOSSignals = input.bool(true, title="Show BOS Signals", group="BOS Entry")
showSLTP = input.bool(true, title="Show SL/TP Levels", group="Risk Management")
showOBZones = input.bool(true, title="Show Order Block Zones", group="BOS Entry")
waitForRetracement = input.bool(true, title="Wait for OB Retracement", group="BOS Entry")
retracementThreshold = input.float(0.5, title="Retracement Threshold", minval=0.1, maxval=1.0, step=0.1, group="BOS Entry")

// Risk Management Settings
slLookback = input.int(50, title="SL Lookback (bars)", minval=10, maxval=200, group="Risk Management")
tpRatio = input.float(1, title="TP Ratio (vs SL)", minval=0.1, maxval=2.0, step=0.1, group="Risk Management")

// === Constants ===
BULLISH = +1
BEARISH = -1
BOS = "BOS"
CHOCH = "CHOCH"

GREEN = #089981
RED = #F23645
BLUE = #2157f3
GRAY = #878b94

// === Data Structures ===
type pivot
    float currentLevel
    float lastLevel
    bool crossed
    int barTime
    int barIndex

type trend
    int bias

type orderBlock
    float high
    float low
    int barIndex
    int direction  // 1 for bullish OB, -1 for bearish OB
    bool active
    bool touched

type bosState
    bool bullishBOS
    bool bearishBOS
    float obHigh
    float obLow
    bool waitingForRetracement

// === Variables ===
var pivot swingHigh = pivot.new(na, na, false, time, bar_index)
var pivot swingLow = pivot.new(na, na, false, time, bar_index)
var trend swingTrend = trend.new(0)
var bosState currentBOS = bosState.new(false, false, na, na, false)
var orderBlock currentOB = orderBlock.new(na, na, na, 0, false, false)

// === Smart Money Functions ===
// Leg detection function
leg(int size) =>
    var leg = 0
    newLegHigh = high[size] > ta.highest(high, size)
    newLegLow = low[size] < ta.lowest(low, size)
    
    if newLegHigh
        leg := 0  // Bearish leg
    else if newLegLow
        leg := 1  // Bullish leg
    leg

startOfNewLeg(int leg) => ta.change(leg) != 0
startOfBearishLeg(int leg) => ta.change(leg) == -1
startOfBullishLeg(int leg) => ta.change(leg) == +1

// Get current structure
getCurrentStructure(int size) =>
    currentLeg = leg(size)
    newPivot = startOfNewLeg(currentLeg)
    pivotLow = startOfBullishLeg(currentLeg)
    pivotHigh = startOfBearishLeg(currentLeg)

    if newPivot
        if pivotLow
            swingLow.lastLevel := swingLow.currentLevel
            swingLow.currentLevel := low[size]
            swingLow.crossed := false
            swingLow.barTime := time[size]
            swingLow.barIndex := bar_index[size]
        else
            swingHigh.lastLevel := swingHigh.currentLevel
            swingHigh.currentLevel := high[size]
            swingHigh.crossed := false
            swingHigh.barTime := time[size]
            swingHigh.barIndex := bar_index[size]



// === BOS Detection ===
// ================================================================================
// üéØ BOS DETECTION LOGIC
// ================================================================================
// Theo chi·∫øn l∆∞·ª£c BOS ‚Üí OB ‚Üí Entry:
// 1. Ph√°t hi·ªán khi gi√° ph√° swing high/low quan tr·ªçng
// 2. X√°c nh·∫≠n b·∫±ng c√¢y n·∫øn m·∫°nh (strong bar)  
// 3. ƒê√°nh d·∫•u xu h∆∞·ªõng m·ªõi nh∆∞ng CH∆ØA ENTRY
// 4. Ch·ªù retracement v·ªÅ OB ƒë·ªÉ entry
// ================================================================================

// Check for strong bullish/bearish bars
isStrongBullishBar() =>
    bodySize = math.abs(close - open)
    upperWick = high - math.max(close, open)
    lowerWick = math.min(close, open) - low
    
    // Strong bullish: body > 60% of total range, small upper wick
    totalRange = high - low
    bodyRatio = bodySize / totalRange
    upperWickRatio = upperWick / totalRange
    
    bodyRatio > 0.5 and upperWickRatio < 0.4

isStrongBearishBar() =>
    bodySize = math.abs(close - open)
    upperWick = high - math.max(close, open)
    lowerWick = math.min(close, open) - low
    
    // Strong bearish: body > 60% of total range, small lower wick
    totalRange = high - low
    bodyRatio = bodySize / totalRange
    lowerWickRatio = lowerWick / totalRange
    
    bodyRatio > 0.5 and lowerWickRatio < 0.4




// Check for weak bullish/bearish bars (any bullish/bearish bar)
isWeakBullishBar() =>
    close > open

isWeakBearishBar() =>
    close < open

// ================================================================================
// üéØ ORDER BLOCK DETECTION FUNCTIONS
// ================================================================================
// T√¨m Order Block theo chi·∫øn l∆∞·ª£c BOS ‚Üí OB ‚Üí Entry:
// - Bullish OB: C√¢y bearish cu·ªëi c√πng tr∆∞·ªõc c√∫ tƒÉng m·∫°nh
// - Bearish OB: C√¢y bullish cu·ªëi c√πng tr∆∞·ªõc c√∫ gi·∫£m m·∫°nh
// ================================================================================

// T√¨m Bullish Order Block (cho entry long sau BOS l√™n)
findBullishOB() =>
    var float obHigh = na
    var float obLow = na
    var int obIndex = na
    
    // T√¨m c√¢y bearish cu·ªëi c√πng tr∆∞·ªõc c√∫ tƒÉng m·∫°nh
    for i = 1 to 50
        if close[i] < open[i] and close[i-1] > open[i-1]  // C√¢y bearish sau c√¢y bullish
            // Ki·ªÉm tra c√≥ c√∫ tƒÉng m·∫°nh sau ƒë√≥ kh√¥ng
            hasStrongRise = false
            for j = 0 to i-1
                if close[j] > high[i] and isStrongBullishBar()
                    hasStrongRise := true
                    break
            
            if hasStrongRise
                obHigh := high[i]
                obLow := low[i]
                obIndex := bar_index[i]
                break
    
    [obHigh, obLow, obIndex]

// T√¨m Bearish Order Block (cho entry short sau BOS xu·ªëng)  
findBearishOB() =>
    var float obHigh = na
    var float obLow = na
    var int obIndex = na
    
    // T√¨m c√¢y bullish cu·ªëi c√πng tr∆∞·ªõc c√∫ gi·∫£m m·∫°nh
    for i = 1 to 50
        if close[i] > open[i] and close[i-1] < open[i-1]  // C√¢y bullish sau c√¢y bearish
            // Ki·ªÉm tra c√≥ c√∫ gi·∫£m m·∫°nh sau ƒë√≥ kh√¥ng
            hasStrongDrop = false
            for j = 0 to i-1
                if close[j] < low[i] and isStrongBearishBar()
                    hasStrongDrop := true
                    break
                    
            if hasStrongDrop
                obHigh := high[i]
                obLow := low[i] 
                obIndex := bar_index[i]
                break
    
    [obHigh, obLow, obIndex]

// Ki·ªÉm tra gi√° c√≥ retracement v·ªÅ OB zone kh√¥ng
isPriceInOBZone(float obHigh, float obLow) =>
    low <= obHigh and high >= obLow

// ================================================================================
// üö® BOS SIGNAL DETECTION
// ================================================================================
// LOGIC THEO CHI·∫æN L∆Ø·ª¢C:
// - BOS l√™n: gi√° ƒë√≥ng c·ª≠a ph√° swing high g·∫ßn nh·∫•t + c√¢y n·∫øn m·∫°nh
// - BOS xu·ªëng: gi√° ƒë√≥ng c·ª≠a ph√° swing low g·∫ßn nh·∫•t + c√¢y n·∫øn m·∫°nh  
// - ƒê√¢y ch·ªâ l√† b∆∞·ªõc 1 - X√ÅC NH·∫¨N xu h∆∞·ªõng m·ªõi
// - Sau BOS ‚Üí t√¨m OB g·∫ßn nh·∫•t ‚Üí ch·ªù retracement ƒë·ªÉ entry
// ================================================================================
detectBOSSignals() =>
    bullishBOSStrong = false
    bearishBOSStrong = false
    
    // üìà BOS L√äN: Gi√° ph√° swing high + c√¢y n·∫øn bullish m·∫°nh
    // ‚Üí Xu h∆∞·ªõng tƒÉng m·ªõi, t√¨m Bullish OB v√† ch·ªù retracement
    if ta.crossover(close, swingHigh.currentLevel) and not swingHigh.crossed and isStrongBullishBar()
        signalType = swingTrend.bias == BEARISH ? CHOCH : BOS
        
        if signalType == BOS
            bullishBOSStrong := true
            swingHigh.crossed := true
            swingTrend.bias := BULLISH
            
            // T√¨m Bullish OB v√† setup ƒë·ªÉ ch·ªù retracement
            [obHigh, obLow, obIndex] = findBullishOB()
            if not na(obHigh) and not na(obLow)
                currentBOS.bullishBOS := true
                currentBOS.bearishBOS := false
                currentBOS.obHigh := obHigh
                currentBOS.obLow := obLow
                currentBOS.waitingForRetracement := true
                
                currentOB.high := obHigh
                currentOB.low := obLow
                currentOB.barIndex := obIndex
                currentOB.direction := 1  // Bullish OB
                currentOB.active := true
                currentOB.touched := false
    
    // üìâ BOS XU·ªêNG: Gi√° ph√° swing low + c√¢y n·∫øn bearish m·∫°nh  
    // ‚Üí Xu h∆∞·ªõng gi·∫£m m·ªõi, t√¨m Bearish OB v√† ch·ªù retracement
    if ta.crossunder(close, swingLow.currentLevel) and not swingLow.crossed and isStrongBearishBar()
        signalType = swingTrend.bias == BULLISH ? CHOCH : BOS
        
        if signalType == BOS
            bearishBOSStrong := true
            swingLow.crossed := true
            swingTrend.bias := BEARISH
            
            // T√¨m Bearish OB v√† setup ƒë·ªÉ ch·ªù retracement
            [obHigh, obLow, obIndex] = findBearishOB()
            if not na(obHigh) and not na(obLow)
                currentBOS.bullishBOS := false
                currentBOS.bearishBOS := true
                currentBOS.obHigh := obHigh
                currentBOS.obLow := obLow
                currentBOS.waitingForRetracement := true
                
                currentOB.high := obHigh
                currentOB.low := obLow
                currentOB.barIndex := obIndex
                currentOB.direction := -1  // Bearish OB
                currentOB.active := true
                currentOB.touched := false
    
    [bullishBOSStrong, bearishBOSStrong]

// === Risk Management Functions ===
// Calculate TP based on 100% of SL distance
calculateTP(float entryPrice, float slPrice, bool isLong) =>
    slDistance = math.abs(entryPrice - slPrice)
    tpDistance = slDistance * tpRatio
    
    if isLong
        entryPrice + tpDistance
    else
        entryPrice - tpDistance

// === Main Execution ===
// Update structure
getCurrentStructure(50)  // Swing structure

// Detect BOS signals
[bullishBOSStrong, bearishBOSStrong] = detectBOSSignals()

// ================================================================================
// üéØ ORDER BLOCK (OB) LOGIC - B∆Ø·ªöC 2 C·ª¶A CHI·∫æN L∆Ø·ª¢C
// ================================================================================
// C√ÅCH HO·∫†T ƒê·ªòNG:
// 1. Sau khi c√≥ BOS, t√¨m OB g·∫ßn nh·∫•t theo h∆∞·ªõng BOS
// 2. BOS xu·ªëng ‚Üí Bearish OB (c√¢y bullish cu·ªëi c√πng tr∆∞·ªõc c√∫ gi·∫£m m·∫°nh)
// 3. BOS l√™n ‚Üí Bullish OB (c√¢y bearish cu·ªëi c√πng tr∆∞·ªõc c√∫ tƒÉng m·∫°nh)  
// 4. ƒê·ª£i gi√° retracement v·ªÅ v√πng OB n√†y ƒë·ªÉ entry
// 5. SL ƒë·∫∑t ngo√†i OB (tr√™n cho short, d∆∞·ªõi cho long)
// ================================================================================

m5High = request.security(syminfo.tickerid, "5", high)
m5Low = request.security(syminfo.tickerid, "5", low)
m5Volume = request.security(syminfo.tickerid, "5", volume)

// X√°c ƒë·ªãnh Order Block t·ª´ timeframe 5M
m5OBHigh = request.security(syminfo.tickerid, "5", ta.highest(high, 50))
m5OBLow = request.security(syminfo.tickerid, "5", ta.lowest(low, 50))

// üéØ SL LEVELS - Theo nguy√™n t·∫Øc OB
longSLLevel = m5OBLow    // SL cho long = d∆∞·ªõi OB (th·∫•p nh·∫•t c·ªßa OB 5M)
shortSLLevel = m5OBHigh  // SL cho short = tr√™n OB (cao nh·∫•t c·ªßa OB 5M)

// ================================================================================
// üöÄ STRATEGY EXECUTION - B∆Ø·ªöC 3: ENTRY POINT (C·∫¢I THI·ªÜN)
// ================================================================================
// ‚úÖ LOGIC ENTRY THEO CHI·∫æN L∆Ø·ª¢C BOS ‚Üí OB ‚Üí ENTRY CHU·∫®N:
// 1. ‚úÖ Ph√°t hi·ªán BOS ‚Üí ƒê√°nh d·∫•u xu h∆∞·ªõng m·ªõi
// 2. ‚úÖ T√¨m OB g·∫ßn nh·∫•t theo h∆∞·ªõng BOS  
// 3. ‚úÖ Ch·ªù gi√° retracement v·ªÅ v√πng OB
// 4. ‚úÖ Entry khi gi√° touch OB zone (ƒëi·ªÉm entry v√†ng)
// 
// üéØ RISK MANAGEMENT:
// - SL: Ngo√†i OB (d∆∞·ªõi cho long, tr√™n cho short)
// - TP: Theo R:R ratio (m·∫∑c ƒë·ªãnh 1:1)
// ================================================================================

// Ki·ªÉm tra retracement v·ªÅ OB zone sau BOS
if currentBOS.waitingForRetracement and currentOB.active
    inOBZone = isPriceInOBZone(currentOB.high, currentOB.low)
    
    // ‚úÖ Entry khi gi√° retracement v·ªÅ OB zone
    if inOBZone and not currentOB.touched
        currentOB.touched := true
        
        // üìà LONG ENTRY: Sau BOS l√™n v√† retracement v·ªÅ Bullish OB
        if currentBOS.bullishBOS and strategy.position_size <= 0
            entryPrice = close
            slPrice = currentOB.low  // SL d∆∞·ªõi OB
            tpPrice = calculateTP(entryPrice, slPrice, true)
            
            strategy.entry("Long OB Retracement", strategy.long)
            strategy.exit("Long OB Exit", "Long OB Retracement", stop=slPrice, limit=tpPrice)
            
            if showBOSSignals
                label.new(bar_index, low, text="ENTRY\nOB\nLONG", color=color.green, style=label.style_label_up, size=size.small)
            
            // Reset BOS state after entry
            currentBOS.waitingForRetracement := false
            currentOB.active := false
        
        // üìâ SHORT ENTRY: Sau BOS xu·ªëng v√† retracement v·ªÅ Bearish OB
        if currentBOS.bearishBOS and strategy.position_size >= 0
            entryPrice = close
            slPrice = currentOB.high  // SL tr√™n OB  
            tpPrice = calculateTP(entryPrice, slPrice, false)
            
            strategy.entry("Short OB Retracement", strategy.short)
            strategy.exit("Short OB Exit", "Short OB Retracement", stop=slPrice, limit=tpPrice)
            
            if showBOSSignals
                label.new(bar_index, high, text="ENTRY\nOB\nSHORT", color=color.red, style=label.style_label_down, size=size.small)
            
            // Reset BOS state after entry
            currentBOS.waitingForRetracement := false
            currentOB.active := false

// üîÑ Hi·ªÉn th·ªã BOS signals (ch·ªâ ƒë·ªÉ th√¥ng b√°o, kh√¥ng entry ngay)
if bullishBOSStrong and showBOSSignals
    label.new(bar_index, low, text="BOS‚Üó\nWAIT OB", color=color.blue, style=label.style_label_up, size=size.normal)

if bearishBOSStrong and showBOSSignals  
    label.new(bar_index, high, text="BOS‚Üò\nWAIT OB", color=color.orange, style=label.style_label_down, size=size.normal)

// === Plots ===
// Calculate TP levels for plotting
longTPLevel = strategy.position_size > 0 ? calculateTP(strategy.position_avg_price, longSLLevel, true) : na
shortTPLevel = strategy.position_size < 0 ? calculateTP(strategy.position_avg_price, shortSLLevel, false) : na

// Plot current SL levels for reference
plot(showSLTP and strategy.position_size > 0 ? longSLLevel : na, "Long SL Level", color.red, 2, plot.style_stepline)
plot(showSLTP and strategy.position_size < 0 ? shortSLLevel : na, "Short SL Level", color.red, 2, plot.style_stepline)

// Plot current TP levels for reference
plot(longTPLevel, "Long TP Level", color.green, 2, plot.style_stepline)
plot(shortTPLevel, "Short TP Level", color.green, 2, plot.style_stepline)

// ================================================================================
// üìä ORDER BLOCK ZONE VISUALIZATION
// ================================================================================
// Hi·ªÉn th·ªã v√πng OB ƒëang ch·ªù retracement
// ================================================================================

// Plot Order Block zones
obHighLevel = currentOB.active ? currentOB.high : na
obLowLevel = currentOB.active ? currentOB.low : na

plot(showOBZones and currentOB.active ? obHighLevel : na, "OB High", color.new(color.purple, 50), 2, plot.style_stepline)
plot(showOBZones and currentOB.active ? obLowLevel : na, "OB Low", color.new(color.purple, 50), 2, plot.style_stepline)

// Fill OB zone
obZoneFill = fill(plot(showOBZones and currentOB.active ? obHighLevel : na, color=na), 
                  plot(showOBZones and currentOB.active ? obLowLevel : na, color=na), 
                  color=color.new(currentOB.direction > 0 ? color.green : color.red, 90),
                  title="OB Zone")

// ================================================================================
// üéâ CHI·∫æN L∆Ø·ª¢C BOS ‚Üí OB ‚Üí ENTRY ƒê√É HO√ÄN THI·ªÜN
// ================================================================================
// ‚úÖ SCRIPT ƒê√É C·∫¢I THI·ªÜN HO√ÄN TO√ÄN:
// 1. ‚úÖ BOS Detection - Ph√°t hi·ªán khi gi√° ph√° swing high/low v·ªõi c√¢y n·∫øn m·∫°nh
// 2. ‚úÖ Order Block Detection - T√¨m c√¢y n·∫øn c·ª• th·ªÉ l√†m OB theo ƒë√∫ng methodology
//    ‚Ä¢ Bullish OB: C√¢y bearish cu·ªëi tr∆∞·ªõc c√∫ tƒÉng m·∫°nh (cho long entry)  
//    ‚Ä¢ Bearish OB: C√¢y bullish cu·ªëi tr∆∞·ªõc c√∫ gi·∫£m m·∫°nh (cho short entry)
// 3. ‚úÖ Retracement Logic - Ch·ªù gi√° h·ªìi v·ªÅ OB zone r·ªìi m·ªõi entry
// 4. ‚úÖ Risk Management - SL ngo√†i OB, TP theo R:R 1:1
// 5. ‚úÖ Visual Signals - Hi·ªÉn th·ªã BOS, OB zones, entry points
// 6. ‚úÖ Settings Panel - T√πy ch·ªânh c√°c tham s·ªë strategy
//
// üéØ C√ÅCH HO·∫†T ƒê·ªòNG THEO CHI·∫æN L∆Ø·ª¢C CHU·∫®N:
// 1. üîç Ph√°t hi·ªán BOS ‚Üí Hi·ªÉn th·ªã "BOS‚Üó WAIT OB" ho·∫∑c "BOS‚Üò WAIT OB"
// 2. üéØ T√¨m OB g·∫ßn nh·∫•t theo h∆∞·ªõng BOS ‚Üí Hi·ªÉn th·ªã v√πng OB m√†u t√≠m
// 3. ‚è≥ Ch·ªù gi√° retracement v·ªÅ v√πng OB (ƒëi·ªÉm entry v√†ng)
// 4. üöÄ Entry khi gi√° touch OB ‚Üí Hi·ªÉn th·ªã "ENTRY OB LONG/SHORT"
// 5. üìä SL ƒë·∫∑t ngo√†i OB, TP theo R:R ratio
//
// üéÆ SETTINGS AVAILABLE:
// ‚Ä¢ Show BOS Signals, Show OB Zones, Show SL/TP
// ‚Ä¢ Wait for Retracement (b·∫≠t/t·∫Øt ch·ªù retracement)
// ‚Ä¢ Retracement Threshold, TP Ratio
//
// üíé ƒêI·ªÇM M·∫†NH C·ª¶A STRATEGY:
// ‚Ä¢ Kh√¥ng entry ngay khi c√≥ BOS (tr√°nh fakeout)
// ‚Ä¢ Ch·ªù retracement v·ªÅ OB ƒë·ªÉ c√≥ entry price t·ªët h∆°n
// ‚Ä¢ Risk management ch·∫∑t ch·∫Ω v·ªõi SL ngo√†i OB
// ‚Ä¢ Visual clear gi√∫p theo d√µi signals d·ªÖ d√†ng
// ================================================================================